(function(){
    angular
        .module("<%= applicationName %>")
        .config(Config);

    function Config($routeProvider) {
        $routeProvider
            //
            // VIEW CONTROLLERS
            //
<% for(var p in views) {
-%>
            .when("/<%= views[p].name %>", {
                templateUrl: "/wax/<%= applicationName %>/templates/<%= views[p].name %>.html"
            })
<% }
-%>
            //
            // ENTITY CONTROLLERS
            //
<% for(var p in entities) {
-%>
            //
            // <%= entities[p].name %> Entity Controllers
            //
            .when("/<%= entities[p].name %>", {
                templateUrl: "/wax/<%= applicationName %>/entities/<%= entities[p].name %>/list/templates/list.html",
                controller: "<%= entities[p].name %>ListController",
                controllerAs: "model",
                resolve: {
                    checkLoggedin: checkLoggedin
                }
            })
            .when("/<%= entities[p].name %>/new", {
                templateUrl: "/wax/<%= applicationName %>/entities/<%= entities[p].name %>/details/templates/details.html",
                controller: "<%= entities[p].name %>DetailsController",
                controllerAs: "model",
                resolve: {
                    checkLoggedin: checkLoggedin
                }
            })
            .when("/<%= entities[p].name %>/:<%= entities[p].name %>Id", {
                templateUrl: "/wax/<%= applicationName %>/entities/<%= entities[p].name %>/details/templates/details.html",
                controller: "<%= entities[p].name %>DetailsController",
                controllerAs: "model",
                resolve: {
                    checkLoggedin: checkLoggedin
                }
            })
<%      if(entities[p].relations) {
            for(var relatedEntityName in entities[p].relations) {
                var relation = entities[p].relations[relatedEntityName];
-%>
            .when("/<%= entities[p].name %>/:<%= entities[p].name %>Id/<%= relatedEntityName %>/map", {
                templateUrl: "/wax/<%= applicationName %>/entities/<%= entities[p].name %>/<%= relatedEntityName %>/map/templates/<%= entities[p].name %>2<%= relatedEntityName %>Map.html",
                controller: "<%= entities[p].name %>2<%= relatedEntityName %>MapController",
                controllerAs: "model",
                resolve: {
                    checkLoggedin: checkLoggedin
                }
            })
<%          }
        }
    }
-%>
            //
            // user authentication
            //
            .when("/login", {
                templateUrl: "/views/user/login.view.client.html",
                controller: "LoginController",
                controllerAs: "model"
            })
            .when("/register", {
                templateUrl: "/views/user/register.view.client.html",
                controller: "RegisterController",
                controllerAs: "model"
            })
            .when("/profile", {
                templateUrl: "/views/user/profile.view.client.html",
                controller: "ProfileController",
                controllerAs: "model",
                resolve: {
                    checkLoggedin: checkLoggedin
                }
            })
            //
            // default
            //
/*
            .when("/entity", {
                templateUrl: "/wax/entity-list.view.client.html",
                controller:  "entityListController",
                controllerAs: "model"
            })
*/
            .when("/default", {
                templateUrl: "/wax/default.html"
            })
            .otherwise({
                redirectTo: "/<%= startEntity %>"

            });
    }

    var checkLoggedin = function ($q, $timeout, $http, $location, $rootScope, UserService) {
        var deferred = $q.defer();

        $http.get('/wax/<%= applicationName %>/api/user/loggedin').success(function (user) {
            $rootScope.errorMessage = null;
            // User is Authenticated
            if (user !== '0') {
                $rootScope.currentUser = user;
                deferred.resolve();
            }
            // User is Not Authenticated
            else {
                $rootScope.errorMessage = 'You need to log in.';
                deferred.reject();
                $location.url('/login');
            }
        });

        return deferred.promise;
    };

})();